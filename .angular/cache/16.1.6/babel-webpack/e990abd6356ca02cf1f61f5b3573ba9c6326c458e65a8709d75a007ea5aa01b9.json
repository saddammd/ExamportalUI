{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, BehaviorSubject, of, combineLatest, pipe, Observable, fromEventPattern, merge } from 'rxjs';\nimport { take, startWith, map, combineLatest as combineLatest$1, skipWhile, scan, distinctUntilChanged, tap, mergeMap, takeUntil, publish, switchMap, withLatestFrom, filter } from 'rxjs/operators';\n\n/// <reference types=\"youtube\" />\nconst _c0 = [\"youtubeContainer\"];\nconst DEFAULT_PLAYER_WIDTH = 640;\nconst DEFAULT_PLAYER_HEIGHT = 390;\n/**\n * Angular component that renders a YouTube player via the YouTube player\n * iframe API.\n * @see https://developers.google.com/youtube/iframe_api_reference\n */\nclass YouTubePlayer {\n  /** YouTube Video ID to view */\n  get videoId() {\n    return this._videoId.value;\n  }\n  set videoId(videoId) {\n    this._videoId.next(videoId);\n  }\n  /** Height of video player */\n  get height() {\n    return this._height.value;\n  }\n  set height(height) {\n    this._height.next(height || DEFAULT_PLAYER_HEIGHT);\n  }\n  /** Width of video player */\n  get width() {\n    return this._width.value;\n  }\n  set width(width) {\n    this._width.next(width || DEFAULT_PLAYER_WIDTH);\n  }\n  /** The moment when the player is supposed to start playing */\n  set startSeconds(startSeconds) {\n    this._startSeconds.next(startSeconds);\n  }\n  /** The moment when the player is supposed to stop playing */\n  set endSeconds(endSeconds) {\n    this._endSeconds.next(endSeconds);\n  }\n  /** The suggested quality of the player */\n  set suggestedQuality(suggestedQuality) {\n    this._suggestedQuality.next(suggestedQuality);\n  }\n  /**\n   * Extra parameters used to configure the player. See:\n   * https://developers.google.com/youtube/player_parameters.html?playerVersion=HTML5#Parameters\n   */\n  get playerVars() {\n    return this._playerVars.value;\n  }\n  set playerVars(playerVars) {\n    this._playerVars.next(playerVars);\n  }\n  /** Whether cookies inside the player have been disabled. */\n  get disableCookies() {\n    return this._disableCookies.value;\n  }\n  set disableCookies(value) {\n    this._disableCookies.next(!!value);\n  }\n  constructor(_ngZone, platformId) {\n    this._ngZone = _ngZone;\n    this._youtubeContainer = new Subject();\n    this._destroyed = new Subject();\n    this._playerChanges = new BehaviorSubject(undefined);\n    this._videoId = new BehaviorSubject(undefined);\n    this._height = new BehaviorSubject(DEFAULT_PLAYER_HEIGHT);\n    this._width = new BehaviorSubject(DEFAULT_PLAYER_WIDTH);\n    this._startSeconds = new BehaviorSubject(undefined);\n    this._endSeconds = new BehaviorSubject(undefined);\n    this._suggestedQuality = new BehaviorSubject(undefined);\n    this._playerVars = new BehaviorSubject(undefined);\n    this._disableCookies = new BehaviorSubject(false);\n    /** Outputs are direct proxies from the player itself. */\n    this.ready = this._getLazyEmitter('onReady');\n    this.stateChange = this._getLazyEmitter('onStateChange');\n    this.error = this._getLazyEmitter('onError');\n    this.apiChange = this._getLazyEmitter('onApiChange');\n    this.playbackQualityChange = this._getLazyEmitter('onPlaybackQualityChange');\n    this.playbackRateChange = this._getLazyEmitter('onPlaybackRateChange');\n    this._isBrowser = isPlatformBrowser(platformId);\n  }\n  ngOnInit() {\n    // Don't do anything if we're not in a browser environment.\n    if (!this._isBrowser) {\n      return;\n    }\n    let iframeApiAvailableObs = of(true);\n    if (!window.YT || !window.YT.Player) {\n      if (this.showBeforeIframeApiLoads && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new Error('Namespace YT not found, cannot construct embedded youtube player. ' + 'Please install the YouTube Player API Reference for iframe Embeds: ' + 'https://developers.google.com/youtube/iframe_api_reference');\n      }\n      const iframeApiAvailableSubject = new Subject();\n      this._existingApiReadyCallback = window.onYouTubeIframeAPIReady;\n      window.onYouTubeIframeAPIReady = () => {\n        if (this._existingApiReadyCallback) {\n          this._existingApiReadyCallback();\n        }\n        this._ngZone.run(() => iframeApiAvailableSubject.next(true));\n      };\n      iframeApiAvailableObs = iframeApiAvailableSubject.pipe(take(1), startWith(false));\n    }\n    const hostObservable = this._disableCookies.pipe(map(cookiesDisabled => cookiesDisabled ? 'https://www.youtube-nocookie.com' : undefined));\n    // An observable of the currently loaded player.\n    const playerObs = createPlayerObservable(this._youtubeContainer, this._videoId, hostObservable, iframeApiAvailableObs, this._width, this._height, this._playerVars, this._ngZone).pipe(tap(player => {\n      // Emit this before the `waitUntilReady` call so that we can bind to\n      // events that happen as the player is being initialized (e.g. `onReady`).\n      this._playerChanges.next(player);\n    }), waitUntilReady(player => {\n      // Destroy the player if loading was aborted so that we don't end up leaking memory.\n      if (!playerIsReady(player)) {\n        player.destroy();\n      }\n    }), takeUntil(this._destroyed), publish());\n    // Set up side effects to bind inputs to the player.\n    playerObs.subscribe(player => {\n      this._player = player;\n      if (player && this._pendingPlayerState) {\n        this._initializePlayer(player, this._pendingPlayerState);\n      }\n      this._pendingPlayerState = undefined;\n    });\n    bindSizeToPlayer(playerObs, this._width, this._height);\n    bindSuggestedQualityToPlayer(playerObs, this._suggestedQuality);\n    bindCueVideoCall(playerObs, this._videoId, this._startSeconds, this._endSeconds, this._suggestedQuality, this._destroyed);\n    // After all of the subscriptions are set up, connect the observable.\n    playerObs.connect();\n  }\n  ngAfterViewInit() {\n    this._youtubeContainer.next(this.youtubeContainer.nativeElement);\n  }\n  ngOnDestroy() {\n    if (this._player) {\n      this._player.destroy();\n      window.onYouTubeIframeAPIReady = this._existingApiReadyCallback;\n    }\n    this._playerChanges.complete();\n    this._videoId.complete();\n    this._height.complete();\n    this._width.complete();\n    this._startSeconds.complete();\n    this._endSeconds.complete();\n    this._suggestedQuality.complete();\n    this._youtubeContainer.complete();\n    this._playerVars.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#playVideo */\n  playVideo() {\n    if (this._player) {\n      this._player.playVideo();\n    } else {\n      this._getPendingState().playbackState = YT.PlayerState.PLAYING;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#pauseVideo */\n  pauseVideo() {\n    if (this._player) {\n      this._player.pauseVideo();\n    } else {\n      this._getPendingState().playbackState = YT.PlayerState.PAUSED;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#stopVideo */\n  stopVideo() {\n    if (this._player) {\n      this._player.stopVideo();\n    } else {\n      // It seems like YouTube sets the player to CUED when it's stopped.\n      this._getPendingState().playbackState = YT.PlayerState.CUED;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#seekTo */\n  seekTo(seconds, allowSeekAhead) {\n    if (this._player) {\n      this._player.seekTo(seconds, allowSeekAhead);\n    } else {\n      this._getPendingState().seek = {\n        seconds,\n        allowSeekAhead\n      };\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#mute */\n  mute() {\n    if (this._player) {\n      this._player.mute();\n    } else {\n      this._getPendingState().muted = true;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#unMute */\n  unMute() {\n    if (this._player) {\n      this._player.unMute();\n    } else {\n      this._getPendingState().muted = false;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#isMuted */\n  isMuted() {\n    if (this._player) {\n      return this._player.isMuted();\n    }\n    if (this._pendingPlayerState) {\n      return !!this._pendingPlayerState.muted;\n    }\n    return false;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#setVolume */\n  setVolume(volume) {\n    if (this._player) {\n      this._player.setVolume(volume);\n    } else {\n      this._getPendingState().volume = volume;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getVolume */\n  getVolume() {\n    if (this._player) {\n      return this._player.getVolume();\n    }\n    if (this._pendingPlayerState && this._pendingPlayerState.volume != null) {\n      return this._pendingPlayerState.volume;\n    }\n    return 0;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate */\n  setPlaybackRate(playbackRate) {\n    if (this._player) {\n      return this._player.setPlaybackRate(playbackRate);\n    } else {\n      this._getPendingState().playbackRate = playbackRate;\n    }\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackRate */\n  getPlaybackRate() {\n    if (this._player) {\n      return this._player.getPlaybackRate();\n    }\n    if (this._pendingPlayerState && this._pendingPlayerState.playbackRate != null) {\n      return this._pendingPlayerState.playbackRate;\n    }\n    return 0;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates */\n  getAvailablePlaybackRates() {\n    return this._player ? this._player.getAvailablePlaybackRates() : [];\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getVideoLoadedFraction */\n  getVideoLoadedFraction() {\n    return this._player ? this._player.getVideoLoadedFraction() : 0;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getPlayerState */\n  getPlayerState() {\n    if (!this._isBrowser || !window.YT) {\n      return undefined;\n    }\n    if (this._player) {\n      return this._player.getPlayerState();\n    }\n    if (this._pendingPlayerState && this._pendingPlayerState.playbackState != null) {\n      return this._pendingPlayerState.playbackState;\n    }\n    return YT.PlayerState.UNSTARTED;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getCurrentTime */\n  getCurrentTime() {\n    if (this._player) {\n      return this._player.getCurrentTime();\n    }\n    if (this._pendingPlayerState && this._pendingPlayerState.seek) {\n      return this._pendingPlayerState.seek.seconds;\n    }\n    return 0;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackQuality */\n  getPlaybackQuality() {\n    return this._player ? this._player.getPlaybackQuality() : 'default';\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getAvailableQualityLevels */\n  getAvailableQualityLevels() {\n    return this._player ? this._player.getAvailableQualityLevels() : [];\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getDuration */\n  getDuration() {\n    return this._player ? this._player.getDuration() : 0;\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getVideoUrl */\n  getVideoUrl() {\n    return this._player ? this._player.getVideoUrl() : '';\n  }\n  /** See https://developers.google.com/youtube/iframe_api_reference#getVideoEmbedCode */\n  getVideoEmbedCode() {\n    return this._player ? this._player.getVideoEmbedCode() : '';\n  }\n  /** Gets an object that should be used to store the temporary API state. */\n  _getPendingState() {\n    if (!this._pendingPlayerState) {\n      this._pendingPlayerState = {};\n    }\n    return this._pendingPlayerState;\n  }\n  /** Initializes a player from a temporary state. */\n  _initializePlayer(player, state) {\n    const {\n      playbackState,\n      playbackRate,\n      volume,\n      muted,\n      seek\n    } = state;\n    switch (playbackState) {\n      case YT.PlayerState.PLAYING:\n        player.playVideo();\n        break;\n      case YT.PlayerState.PAUSED:\n        player.pauseVideo();\n        break;\n      case YT.PlayerState.CUED:\n        player.stopVideo();\n        break;\n    }\n    if (playbackRate != null) {\n      player.setPlaybackRate(playbackRate);\n    }\n    if (volume != null) {\n      player.setVolume(volume);\n    }\n    if (muted != null) {\n      muted ? player.mute() : player.unMute();\n    }\n    if (seek != null) {\n      player.seekTo(seek.seconds, seek.allowSeekAhead);\n    }\n  }\n  /** Gets an observable that adds an event listener to the player when a user subscribes to it. */\n  _getLazyEmitter(name) {\n    // Start with the stream of players. This way the events will be transferred\n    // over to the new player if it gets swapped out under-the-hood.\n    return this._playerChanges.pipe(\n    // Switch to the bound event. `switchMap` ensures that the old event is removed when the\n    // player is changed. If there's no player, return an observable that never emits.\n    switchMap(player => {\n      return player ? fromEventPattern(listener => {\n        player.addEventListener(name, listener);\n      }, listener => {\n        // The API seems to throw when we try to unbind from a destroyed player and it doesn't\n        // expose whether the player has been destroyed so we have to wrap it in a try/catch to\n        // prevent the entire stream from erroring out.\n        try {\n          if (player.removeEventListener) {\n            player.removeEventListener(name, listener);\n          }\n        } catch {}\n      }) : of();\n    }),\n    // By default we run all the API interactions outside the zone\n    // so we have to bring the events back in manually when they emit.\n    source => new Observable(observer => source.subscribe({\n      next: value => this._ngZone.run(() => observer.next(value)),\n      error: error => observer.error(error),\n      complete: () => observer.complete()\n    })),\n    // Ensures that everything is cleared out on destroy.\n    takeUntil(this._destroyed));\n  }\n}\nYouTubePlayer.ɵfac = function YouTubePlayer_Factory(t) {\n  return new (t || YouTubePlayer)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nYouTubePlayer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YouTubePlayer,\n  selectors: [[\"youtube-player\"]],\n  viewQuery: function YouTubePlayer_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.youtubeContainer = _t.first);\n    }\n  },\n  inputs: {\n    videoId: \"videoId\",\n    height: \"height\",\n    width: \"width\",\n    startSeconds: \"startSeconds\",\n    endSeconds: \"endSeconds\",\n    suggestedQuality: \"suggestedQuality\",\n    playerVars: \"playerVars\",\n    disableCookies: \"disableCookies\",\n    showBeforeIframeApiLoads: \"showBeforeIframeApiLoads\"\n  },\n  outputs: {\n    ready: \"ready\",\n    stateChange: \"stateChange\",\n    error: \"error\",\n    apiChange: \"apiChange\",\n    playbackQualityChange: \"playbackQualityChange\",\n    playbackRateChange: \"playbackRateChange\"\n  },\n  decls: 2,\n  vars: 0,\n  consts: [[\"youtubeContainer\", \"\"]],\n  template: function YouTubePlayer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YouTubePlayer, [{\n    type: Component,\n    args: [{\n      selector: 'youtube-player',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      // This div is *replaced* by the YouTube player embed.\n      template: '<div #youtubeContainer></div>'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    videoId: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    startSeconds: [{\n      type: Input\n    }],\n    endSeconds: [{\n      type: Input\n    }],\n    suggestedQuality: [{\n      type: Input\n    }],\n    playerVars: [{\n      type: Input\n    }],\n    disableCookies: [{\n      type: Input\n    }],\n    showBeforeIframeApiLoads: [{\n      type: Input\n    }],\n    ready: [{\n      type: Output\n    }],\n    stateChange: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    apiChange: [{\n      type: Output\n    }],\n    playbackQualityChange: [{\n      type: Output\n    }],\n    playbackRateChange: [{\n      type: Output\n    }],\n    youtubeContainer: [{\n      type: ViewChild,\n      args: ['youtubeContainer']\n    }]\n  });\n})();\n/** Listens to changes to the given width and height and sets it on the player. */\nfunction bindSizeToPlayer(playerObs, widthObs, heightObs) {\n  return combineLatest([playerObs, widthObs, heightObs]).subscribe(([player, width, height]) => player && player.setSize(width, height));\n}\n/** Listens to changes from the suggested quality and sets it on the given player. */\nfunction bindSuggestedQualityToPlayer(playerObs, suggestedQualityObs) {\n  return combineLatest([playerObs, suggestedQualityObs]).subscribe(([player, suggestedQuality]) => player && suggestedQuality && player.setPlaybackQuality(suggestedQuality));\n}\n/**\n * Returns an observable that emits the loaded player once it's ready. Certain properties/methods\n * won't be available until the iframe finishes loading.\n * @param onAbort Callback function that will be invoked if the player loading was aborted before\n * it was able to complete. Can be used to clean up any loose references.\n */\nfunction waitUntilReady(onAbort) {\n  return mergeMap(player => {\n    if (!player) {\n      return of(undefined);\n    }\n    if (playerIsReady(player)) {\n      return of(player);\n    }\n    // Since removeEventListener is not on Player when it's initialized, we can't use fromEvent.\n    // The player is not initialized fully until the ready is called.\n    return new Observable(emitter => {\n      let aborted = false;\n      let resolved = false;\n      const onReady = event => {\n        resolved = true;\n        if (!aborted) {\n          event.target.removeEventListener('onReady', onReady);\n          emitter.next(event.target);\n        }\n      };\n      player.addEventListener('onReady', onReady);\n      return () => {\n        aborted = true;\n        if (!resolved) {\n          onAbort(player);\n        }\n      };\n    }).pipe(take(1), startWith(undefined));\n  });\n}\n/** Create an observable for the player based on the given options. */\nfunction createPlayerObservable(youtubeContainer, videoIdObs, hostObs, iframeApiAvailableObs, widthObs, heightObs, playerVarsObs, ngZone) {\n  const playerOptions = combineLatest([videoIdObs, hostObs, playerVarsObs]).pipe(withLatestFrom(combineLatest([widthObs, heightObs])), map(([constructorOptions, sizeOptions]) => {\n    const [videoId, host, playerVars] = constructorOptions;\n    const [width, height] = sizeOptions;\n    return videoId ? {\n      videoId,\n      playerVars,\n      width,\n      height,\n      host\n    } : undefined;\n  }));\n  return combineLatest([youtubeContainer, playerOptions, of(ngZone)]).pipe(skipUntilRememberLatest(iframeApiAvailableObs), scan(syncPlayerState, undefined), distinctUntilChanged());\n}\n/** Skips the given observable until the other observable emits true, then emit the latest. */\nfunction skipUntilRememberLatest(notifier) {\n  return pipe(combineLatest$1(notifier), skipWhile(([_, doneSkipping]) => !doneSkipping), map(([value]) => value));\n}\n/** Destroy the player if there are no options, or create the player if there are options. */\nfunction syncPlayerState(player, [container, videoOptions, ngZone]) {\n  if (player && videoOptions && (player.playerVars !== videoOptions.playerVars || player.host !== videoOptions.host)) {\n    // The player needs to be recreated if the playerVars are different.\n    player.destroy();\n  } else if (!videoOptions) {\n    if (player) {\n      // Destroy the player if the videoId was removed.\n      player.destroy();\n    }\n    return;\n  } else if (player) {\n    return player;\n  }\n  // Important! We need to create the Player object outside of the `NgZone`, because it kicks\n  // off a 250ms setInterval which will continually trigger change detection if we don't.\n  const newPlayer = ngZone.runOutsideAngular(() => new YT.Player(container, videoOptions));\n  newPlayer.videoId = videoOptions.videoId;\n  newPlayer.playerVars = videoOptions.playerVars;\n  newPlayer.host = videoOptions.host;\n  return newPlayer;\n}\n/**\n * Call cueVideoById if the videoId changes, or when start or end seconds change. cueVideoById will\n * change the loaded video id to the given videoId, and set the start and end times to the given\n * start/end seconds.\n */\nfunction bindCueVideoCall(playerObs, videoIdObs, startSecondsObs, endSecondsObs, suggestedQualityObs, destroyed) {\n  const cueOptionsObs = combineLatest([startSecondsObs, endSecondsObs]).pipe(map(([startSeconds, endSeconds]) => ({\n    startSeconds,\n    endSeconds\n  })));\n  // Only respond to changes in cue options if the player is not running.\n  const filteredCueOptions = cueOptionsObs.pipe(filterOnOther(playerObs, player => !!player && !hasPlayerStarted(player)));\n  // If the video id changed, there's no reason to run 'cue' unless the player\n  // was initialized with a different video id.\n  const changedVideoId = videoIdObs.pipe(filterOnOther(playerObs, (player, videoId) => !!player && player.videoId !== videoId));\n  // If the player changed, there's no reason to run 'cue' unless there are cue options.\n  const changedPlayer = playerObs.pipe(filterOnOther(combineLatest([videoIdObs, cueOptionsObs]), ([videoId, cueOptions], player) => !!player && (videoId != player.videoId || !!cueOptions.startSeconds || !!cueOptions.endSeconds)));\n  merge(changedPlayer, changedVideoId, filteredCueOptions).pipe(withLatestFrom(combineLatest([playerObs, videoIdObs, cueOptionsObs, suggestedQualityObs])), map(([_, values]) => values), takeUntil(destroyed)).subscribe(([player, videoId, cueOptions, suggestedQuality]) => {\n    if (!videoId || !player) {\n      return;\n    }\n    player.videoId = videoId;\n    player.cueVideoById({\n      videoId,\n      suggestedQuality,\n      ...cueOptions\n    });\n  });\n}\nfunction hasPlayerStarted(player) {\n  const state = player.getPlayerState();\n  return state !== YT.PlayerState.UNSTARTED && state !== YT.PlayerState.CUED;\n}\nfunction playerIsReady(player) {\n  return 'getPlayerStatus' in player;\n}\n/** Combines the two observables temporarily for the filter function. */\nfunction filterOnOther(otherObs, filterFn) {\n  return pipe(withLatestFrom(otherObs), filter(([value, other]) => filterFn(other, value)), map(([value]) => value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENTS = [YouTubePlayer];\nclass YouTubePlayerModule {}\nYouTubePlayerModule.ɵfac = function YouTubePlayerModule_Factory(t) {\n  return new (t || YouTubePlayerModule)();\n};\nYouTubePlayerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: YouTubePlayerModule\n});\nYouTubePlayerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YouTubePlayerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: COMPONENTS,\n      exports: COMPONENTS\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { YouTubePlayer, YouTubePlayerModule };","map":{"version":3,"names":["i0","PLATFORM_ID","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","Input","Output","ViewChild","NgModule","isPlatformBrowser","Subject","BehaviorSubject","of","combineLatest","pipe","Observable","fromEventPattern","merge","take","startWith","map","combineLatest$1","skipWhile","scan","distinctUntilChanged","tap","mergeMap","takeUntil","publish","switchMap","withLatestFrom","filter","_c0","DEFAULT_PLAYER_WIDTH","DEFAULT_PLAYER_HEIGHT","YouTubePlayer","videoId","_videoId","value","next","height","_height","width","_width","startSeconds","_startSeconds","endSeconds","_endSeconds","suggestedQuality","_suggestedQuality","playerVars","_playerVars","disableCookies","_disableCookies","constructor","_ngZone","platformId","_youtubeContainer","_destroyed","_playerChanges","undefined","ready","_getLazyEmitter","stateChange","error","apiChange","playbackQualityChange","playbackRateChange","_isBrowser","ngOnInit","iframeApiAvailableObs","window","YT","Player","showBeforeIframeApiLoads","ngDevMode","Error","iframeApiAvailableSubject","_existingApiReadyCallback","onYouTubeIframeAPIReady","run","hostObservable","cookiesDisabled","playerObs","createPlayerObservable","player","waitUntilReady","playerIsReady","destroy","subscribe","_player","_pendingPlayerState","_initializePlayer","bindSizeToPlayer","bindSuggestedQualityToPlayer","bindCueVideoCall","connect","ngAfterViewInit","youtubeContainer","nativeElement","ngOnDestroy","complete","playVideo","_getPendingState","playbackState","PlayerState","PLAYING","pauseVideo","PAUSED","stopVideo","CUED","seekTo","seconds","allowSeekAhead","seek","mute","muted","unMute","isMuted","setVolume","volume","getVolume","setPlaybackRate","playbackRate","getPlaybackRate","getAvailablePlaybackRates","getVideoLoadedFraction","getPlayerState","UNSTARTED","getCurrentTime","getPlaybackQuality","getAvailableQualityLevels","getDuration","getVideoUrl","getVideoEmbedCode","state","name","listener","addEventListener","removeEventListener","source","observer","ɵfac","YouTubePlayer_Factory","t","ɵɵdirectiveInject","NgZone","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","YouTubePlayer_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","outputs","decls","vars","consts","template","YouTubePlayer_Template","ɵɵelement","encapsulation","changeDetection","ɵsetClassMetadata","args","selector","OnPush","None","Object","decorators","widthObs","heightObs","setSize","suggestedQualityObs","setPlaybackQuality","onAbort","emitter","aborted","resolved","onReady","event","target","videoIdObs","hostObs","playerVarsObs","ngZone","playerOptions","constructorOptions","sizeOptions","host","skipUntilRememberLatest","syncPlayerState","notifier","_","doneSkipping","container","videoOptions","newPlayer","runOutsideAngular","startSecondsObs","endSecondsObs","destroyed","cueOptionsObs","filteredCueOptions","filterOnOther","hasPlayerStarted","changedVideoId","changedPlayer","cueOptions","values","cueVideoById","otherObs","filterFn","other","COMPONENTS","YouTubePlayerModule","YouTubePlayerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","declarations","exports"],"sources":["C:/Users/Saddam Hussain/Desktop/Japanese Website 2/nihongoShiksha/node_modules/@angular/youtube-player/fesm2020/youtube-player.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, BehaviorSubject, of, combineLatest, pipe, Observable, fromEventPattern, merge } from 'rxjs';\nimport { take, startWith, map, combineLatest as combineLatest$1, skipWhile, scan, distinctUntilChanged, tap, mergeMap, takeUntil, publish, switchMap, withLatestFrom, filter } from 'rxjs/operators';\n\n/// <reference types=\"youtube\" />\nconst DEFAULT_PLAYER_WIDTH = 640;\nconst DEFAULT_PLAYER_HEIGHT = 390;\n/**\n * Angular component that renders a YouTube player via the YouTube player\n * iframe API.\n * @see https://developers.google.com/youtube/iframe_api_reference\n */\nclass YouTubePlayer {\n    /** YouTube Video ID to view */\n    get videoId() {\n        return this._videoId.value;\n    }\n    set videoId(videoId) {\n        this._videoId.next(videoId);\n    }\n    /** Height of video player */\n    get height() {\n        return this._height.value;\n    }\n    set height(height) {\n        this._height.next(height || DEFAULT_PLAYER_HEIGHT);\n    }\n    /** Width of video player */\n    get width() {\n        return this._width.value;\n    }\n    set width(width) {\n        this._width.next(width || DEFAULT_PLAYER_WIDTH);\n    }\n    /** The moment when the player is supposed to start playing */\n    set startSeconds(startSeconds) {\n        this._startSeconds.next(startSeconds);\n    }\n    /** The moment when the player is supposed to stop playing */\n    set endSeconds(endSeconds) {\n        this._endSeconds.next(endSeconds);\n    }\n    /** The suggested quality of the player */\n    set suggestedQuality(suggestedQuality) {\n        this._suggestedQuality.next(suggestedQuality);\n    }\n    /**\n     * Extra parameters used to configure the player. See:\n     * https://developers.google.com/youtube/player_parameters.html?playerVersion=HTML5#Parameters\n     */\n    get playerVars() {\n        return this._playerVars.value;\n    }\n    set playerVars(playerVars) {\n        this._playerVars.next(playerVars);\n    }\n    /** Whether cookies inside the player have been disabled. */\n    get disableCookies() {\n        return this._disableCookies.value;\n    }\n    set disableCookies(value) {\n        this._disableCookies.next(!!value);\n    }\n    constructor(_ngZone, platformId) {\n        this._ngZone = _ngZone;\n        this._youtubeContainer = new Subject();\n        this._destroyed = new Subject();\n        this._playerChanges = new BehaviorSubject(undefined);\n        this._videoId = new BehaviorSubject(undefined);\n        this._height = new BehaviorSubject(DEFAULT_PLAYER_HEIGHT);\n        this._width = new BehaviorSubject(DEFAULT_PLAYER_WIDTH);\n        this._startSeconds = new BehaviorSubject(undefined);\n        this._endSeconds = new BehaviorSubject(undefined);\n        this._suggestedQuality = new BehaviorSubject(undefined);\n        this._playerVars = new BehaviorSubject(undefined);\n        this._disableCookies = new BehaviorSubject(false);\n        /** Outputs are direct proxies from the player itself. */\n        this.ready = this._getLazyEmitter('onReady');\n        this.stateChange = this._getLazyEmitter('onStateChange');\n        this.error = this._getLazyEmitter('onError');\n        this.apiChange = this._getLazyEmitter('onApiChange');\n        this.playbackQualityChange = this._getLazyEmitter('onPlaybackQualityChange');\n        this.playbackRateChange = this._getLazyEmitter('onPlaybackRateChange');\n        this._isBrowser = isPlatformBrowser(platformId);\n    }\n    ngOnInit() {\n        // Don't do anything if we're not in a browser environment.\n        if (!this._isBrowser) {\n            return;\n        }\n        let iframeApiAvailableObs = of(true);\n        if (!window.YT || !window.YT.Player) {\n            if (this.showBeforeIframeApiLoads && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw new Error('Namespace YT not found, cannot construct embedded youtube player. ' +\n                    'Please install the YouTube Player API Reference for iframe Embeds: ' +\n                    'https://developers.google.com/youtube/iframe_api_reference');\n            }\n            const iframeApiAvailableSubject = new Subject();\n            this._existingApiReadyCallback = window.onYouTubeIframeAPIReady;\n            window.onYouTubeIframeAPIReady = () => {\n                if (this._existingApiReadyCallback) {\n                    this._existingApiReadyCallback();\n                }\n                this._ngZone.run(() => iframeApiAvailableSubject.next(true));\n            };\n            iframeApiAvailableObs = iframeApiAvailableSubject.pipe(take(1), startWith(false));\n        }\n        const hostObservable = this._disableCookies.pipe(map(cookiesDisabled => (cookiesDisabled ? 'https://www.youtube-nocookie.com' : undefined)));\n        // An observable of the currently loaded player.\n        const playerObs = createPlayerObservable(this._youtubeContainer, this._videoId, hostObservable, iframeApiAvailableObs, this._width, this._height, this._playerVars, this._ngZone).pipe(tap(player => {\n            // Emit this before the `waitUntilReady` call so that we can bind to\n            // events that happen as the player is being initialized (e.g. `onReady`).\n            this._playerChanges.next(player);\n        }), waitUntilReady(player => {\n            // Destroy the player if loading was aborted so that we don't end up leaking memory.\n            if (!playerIsReady(player)) {\n                player.destroy();\n            }\n        }), takeUntil(this._destroyed), publish());\n        // Set up side effects to bind inputs to the player.\n        playerObs.subscribe(player => {\n            this._player = player;\n            if (player && this._pendingPlayerState) {\n                this._initializePlayer(player, this._pendingPlayerState);\n            }\n            this._pendingPlayerState = undefined;\n        });\n        bindSizeToPlayer(playerObs, this._width, this._height);\n        bindSuggestedQualityToPlayer(playerObs, this._suggestedQuality);\n        bindCueVideoCall(playerObs, this._videoId, this._startSeconds, this._endSeconds, this._suggestedQuality, this._destroyed);\n        // After all of the subscriptions are set up, connect the observable.\n        playerObs.connect();\n    }\n    ngAfterViewInit() {\n        this._youtubeContainer.next(this.youtubeContainer.nativeElement);\n    }\n    ngOnDestroy() {\n        if (this._player) {\n            this._player.destroy();\n            window.onYouTubeIframeAPIReady = this._existingApiReadyCallback;\n        }\n        this._playerChanges.complete();\n        this._videoId.complete();\n        this._height.complete();\n        this._width.complete();\n        this._startSeconds.complete();\n        this._endSeconds.complete();\n        this._suggestedQuality.complete();\n        this._youtubeContainer.complete();\n        this._playerVars.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#playVideo */\n    playVideo() {\n        if (this._player) {\n            this._player.playVideo();\n        }\n        else {\n            this._getPendingState().playbackState = YT.PlayerState.PLAYING;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#pauseVideo */\n    pauseVideo() {\n        if (this._player) {\n            this._player.pauseVideo();\n        }\n        else {\n            this._getPendingState().playbackState = YT.PlayerState.PAUSED;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#stopVideo */\n    stopVideo() {\n        if (this._player) {\n            this._player.stopVideo();\n        }\n        else {\n            // It seems like YouTube sets the player to CUED when it's stopped.\n            this._getPendingState().playbackState = YT.PlayerState.CUED;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#seekTo */\n    seekTo(seconds, allowSeekAhead) {\n        if (this._player) {\n            this._player.seekTo(seconds, allowSeekAhead);\n        }\n        else {\n            this._getPendingState().seek = { seconds, allowSeekAhead };\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#mute */\n    mute() {\n        if (this._player) {\n            this._player.mute();\n        }\n        else {\n            this._getPendingState().muted = true;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#unMute */\n    unMute() {\n        if (this._player) {\n            this._player.unMute();\n        }\n        else {\n            this._getPendingState().muted = false;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#isMuted */\n    isMuted() {\n        if (this._player) {\n            return this._player.isMuted();\n        }\n        if (this._pendingPlayerState) {\n            return !!this._pendingPlayerState.muted;\n        }\n        return false;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#setVolume */\n    setVolume(volume) {\n        if (this._player) {\n            this._player.setVolume(volume);\n        }\n        else {\n            this._getPendingState().volume = volume;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVolume */\n    getVolume() {\n        if (this._player) {\n            return this._player.getVolume();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.volume != null) {\n            return this._pendingPlayerState.volume;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate */\n    setPlaybackRate(playbackRate) {\n        if (this._player) {\n            return this._player.setPlaybackRate(playbackRate);\n        }\n        else {\n            this._getPendingState().playbackRate = playbackRate;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackRate */\n    getPlaybackRate() {\n        if (this._player) {\n            return this._player.getPlaybackRate();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackRate != null) {\n            return this._pendingPlayerState.playbackRate;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates */\n    getAvailablePlaybackRates() {\n        return this._player ? this._player.getAvailablePlaybackRates() : [];\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoLoadedFraction */\n    getVideoLoadedFraction() {\n        return this._player ? this._player.getVideoLoadedFraction() : 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlayerState */\n    getPlayerState() {\n        if (!this._isBrowser || !window.YT) {\n            return undefined;\n        }\n        if (this._player) {\n            return this._player.getPlayerState();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackState != null) {\n            return this._pendingPlayerState.playbackState;\n        }\n        return YT.PlayerState.UNSTARTED;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getCurrentTime */\n    getCurrentTime() {\n        if (this._player) {\n            return this._player.getCurrentTime();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.seek) {\n            return this._pendingPlayerState.seek.seconds;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackQuality */\n    getPlaybackQuality() {\n        return this._player ? this._player.getPlaybackQuality() : 'default';\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailableQualityLevels */\n    getAvailableQualityLevels() {\n        return this._player ? this._player.getAvailableQualityLevels() : [];\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getDuration */\n    getDuration() {\n        return this._player ? this._player.getDuration() : 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoUrl */\n    getVideoUrl() {\n        return this._player ? this._player.getVideoUrl() : '';\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoEmbedCode */\n    getVideoEmbedCode() {\n        return this._player ? this._player.getVideoEmbedCode() : '';\n    }\n    /** Gets an object that should be used to store the temporary API state. */\n    _getPendingState() {\n        if (!this._pendingPlayerState) {\n            this._pendingPlayerState = {};\n        }\n        return this._pendingPlayerState;\n    }\n    /** Initializes a player from a temporary state. */\n    _initializePlayer(player, state) {\n        const { playbackState, playbackRate, volume, muted, seek } = state;\n        switch (playbackState) {\n            case YT.PlayerState.PLAYING:\n                player.playVideo();\n                break;\n            case YT.PlayerState.PAUSED:\n                player.pauseVideo();\n                break;\n            case YT.PlayerState.CUED:\n                player.stopVideo();\n                break;\n        }\n        if (playbackRate != null) {\n            player.setPlaybackRate(playbackRate);\n        }\n        if (volume != null) {\n            player.setVolume(volume);\n        }\n        if (muted != null) {\n            muted ? player.mute() : player.unMute();\n        }\n        if (seek != null) {\n            player.seekTo(seek.seconds, seek.allowSeekAhead);\n        }\n    }\n    /** Gets an observable that adds an event listener to the player when a user subscribes to it. */\n    _getLazyEmitter(name) {\n        // Start with the stream of players. This way the events will be transferred\n        // over to the new player if it gets swapped out under-the-hood.\n        return this._playerChanges.pipe(\n        // Switch to the bound event. `switchMap` ensures that the old event is removed when the\n        // player is changed. If there's no player, return an observable that never emits.\n        switchMap(player => {\n            return player\n                ? fromEventPattern((listener) => {\n                    player.addEventListener(name, listener);\n                }, (listener) => {\n                    // The API seems to throw when we try to unbind from a destroyed player and it doesn't\n                    // expose whether the player has been destroyed so we have to wrap it in a try/catch to\n                    // prevent the entire stream from erroring out.\n                    try {\n                        if (player.removeEventListener) {\n                            player.removeEventListener(name, listener);\n                        }\n                    }\n                    catch { }\n                })\n                : of();\n        }), \n        // By default we run all the API interactions outside the zone\n        // so we have to bring the events back in manually when they emit.\n        (source) => new Observable(observer => source.subscribe({\n            next: value => this._ngZone.run(() => observer.next(value)),\n            error: error => observer.error(error),\n            complete: () => observer.complete(),\n        })), \n        // Ensures that everything is cleared out on destroy.\n        takeUntil(this._destroyed));\n    }\n}\nYouTubePlayer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: YouTubePlayer, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nYouTubePlayer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: YouTubePlayer, selector: \"youtube-player\", inputs: { videoId: \"videoId\", height: \"height\", width: \"width\", startSeconds: \"startSeconds\", endSeconds: \"endSeconds\", suggestedQuality: \"suggestedQuality\", playerVars: \"playerVars\", disableCookies: \"disableCookies\", showBeforeIframeApiLoads: \"showBeforeIframeApiLoads\" }, outputs: { ready: \"ready\", stateChange: \"stateChange\", error: \"error\", apiChange: \"apiChange\", playbackQualityChange: \"playbackQualityChange\", playbackRateChange: \"playbackRateChange\" }, viewQueries: [{ propertyName: \"youtubeContainer\", first: true, predicate: [\"youtubeContainer\"], descendants: true }], ngImport: i0, template: '<div #youtubeContainer></div>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: YouTubePlayer, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'youtube-player',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    // This div is *replaced* by the YouTube player embed.\n                    template: '<div #youtubeContainer></div>',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { videoId: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], startSeconds: [{\n                type: Input\n            }], endSeconds: [{\n                type: Input\n            }], suggestedQuality: [{\n                type: Input\n            }], playerVars: [{\n                type: Input\n            }], disableCookies: [{\n                type: Input\n            }], showBeforeIframeApiLoads: [{\n                type: Input\n            }], ready: [{\n                type: Output\n            }], stateChange: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }], apiChange: [{\n                type: Output\n            }], playbackQualityChange: [{\n                type: Output\n            }], playbackRateChange: [{\n                type: Output\n            }], youtubeContainer: [{\n                type: ViewChild,\n                args: ['youtubeContainer']\n            }] } });\n/** Listens to changes to the given width and height and sets it on the player. */\nfunction bindSizeToPlayer(playerObs, widthObs, heightObs) {\n    return combineLatest([playerObs, widthObs, heightObs]).subscribe(([player, width, height]) => player && player.setSize(width, height));\n}\n/** Listens to changes from the suggested quality and sets it on the given player. */\nfunction bindSuggestedQualityToPlayer(playerObs, suggestedQualityObs) {\n    return combineLatest([playerObs, suggestedQualityObs]).subscribe(([player, suggestedQuality]) => player && suggestedQuality && player.setPlaybackQuality(suggestedQuality));\n}\n/**\n * Returns an observable that emits the loaded player once it's ready. Certain properties/methods\n * won't be available until the iframe finishes loading.\n * @param onAbort Callback function that will be invoked if the player loading was aborted before\n * it was able to complete. Can be used to clean up any loose references.\n */\nfunction waitUntilReady(onAbort) {\n    return mergeMap(player => {\n        if (!player) {\n            return of(undefined);\n        }\n        if (playerIsReady(player)) {\n            return of(player);\n        }\n        // Since removeEventListener is not on Player when it's initialized, we can't use fromEvent.\n        // The player is not initialized fully until the ready is called.\n        return new Observable(emitter => {\n            let aborted = false;\n            let resolved = false;\n            const onReady = (event) => {\n                resolved = true;\n                if (!aborted) {\n                    event.target.removeEventListener('onReady', onReady);\n                    emitter.next(event.target);\n                }\n            };\n            player.addEventListener('onReady', onReady);\n            return () => {\n                aborted = true;\n                if (!resolved) {\n                    onAbort(player);\n                }\n            };\n        }).pipe(take(1), startWith(undefined));\n    });\n}\n/** Create an observable for the player based on the given options. */\nfunction createPlayerObservable(youtubeContainer, videoIdObs, hostObs, iframeApiAvailableObs, widthObs, heightObs, playerVarsObs, ngZone) {\n    const playerOptions = combineLatest([videoIdObs, hostObs, playerVarsObs]).pipe(withLatestFrom(combineLatest([widthObs, heightObs])), map(([constructorOptions, sizeOptions]) => {\n        const [videoId, host, playerVars] = constructorOptions;\n        const [width, height] = sizeOptions;\n        return videoId ? { videoId, playerVars, width, height, host } : undefined;\n    }));\n    return combineLatest([youtubeContainer, playerOptions, of(ngZone)]).pipe(skipUntilRememberLatest(iframeApiAvailableObs), scan(syncPlayerState, undefined), distinctUntilChanged());\n}\n/** Skips the given observable until the other observable emits true, then emit the latest. */\nfunction skipUntilRememberLatest(notifier) {\n    return pipe(combineLatest$1(notifier), skipWhile(([_, doneSkipping]) => !doneSkipping), map(([value]) => value));\n}\n/** Destroy the player if there are no options, or create the player if there are options. */\nfunction syncPlayerState(player, [container, videoOptions, ngZone]) {\n    if (player &&\n        videoOptions &&\n        (player.playerVars !== videoOptions.playerVars || player.host !== videoOptions.host)) {\n        // The player needs to be recreated if the playerVars are different.\n        player.destroy();\n    }\n    else if (!videoOptions) {\n        if (player) {\n            // Destroy the player if the videoId was removed.\n            player.destroy();\n        }\n        return;\n    }\n    else if (player) {\n        return player;\n    }\n    // Important! We need to create the Player object outside of the `NgZone`, because it kicks\n    // off a 250ms setInterval which will continually trigger change detection if we don't.\n    const newPlayer = ngZone.runOutsideAngular(() => new YT.Player(container, videoOptions));\n    newPlayer.videoId = videoOptions.videoId;\n    newPlayer.playerVars = videoOptions.playerVars;\n    newPlayer.host = videoOptions.host;\n    return newPlayer;\n}\n/**\n * Call cueVideoById if the videoId changes, or when start or end seconds change. cueVideoById will\n * change the loaded video id to the given videoId, and set the start and end times to the given\n * start/end seconds.\n */\nfunction bindCueVideoCall(playerObs, videoIdObs, startSecondsObs, endSecondsObs, suggestedQualityObs, destroyed) {\n    const cueOptionsObs = combineLatest([startSecondsObs, endSecondsObs]).pipe(map(([startSeconds, endSeconds]) => ({ startSeconds, endSeconds })));\n    // Only respond to changes in cue options if the player is not running.\n    const filteredCueOptions = cueOptionsObs.pipe(filterOnOther(playerObs, player => !!player && !hasPlayerStarted(player)));\n    // If the video id changed, there's no reason to run 'cue' unless the player\n    // was initialized with a different video id.\n    const changedVideoId = videoIdObs.pipe(filterOnOther(playerObs, (player, videoId) => !!player && player.videoId !== videoId));\n    // If the player changed, there's no reason to run 'cue' unless there are cue options.\n    const changedPlayer = playerObs.pipe(filterOnOther(combineLatest([videoIdObs, cueOptionsObs]), ([videoId, cueOptions], player) => !!player &&\n        (videoId != player.videoId || !!cueOptions.startSeconds || !!cueOptions.endSeconds)));\n    merge(changedPlayer, changedVideoId, filteredCueOptions)\n        .pipe(withLatestFrom(combineLatest([playerObs, videoIdObs, cueOptionsObs, suggestedQualityObs])), map(([_, values]) => values), takeUntil(destroyed))\n        .subscribe(([player, videoId, cueOptions, suggestedQuality]) => {\n        if (!videoId || !player) {\n            return;\n        }\n        player.videoId = videoId;\n        player.cueVideoById({\n            videoId,\n            suggestedQuality,\n            ...cueOptions,\n        });\n    });\n}\nfunction hasPlayerStarted(player) {\n    const state = player.getPlayerState();\n    return state !== YT.PlayerState.UNSTARTED && state !== YT.PlayerState.CUED;\n}\nfunction playerIsReady(player) {\n    return 'getPlayerStatus' in player;\n}\n/** Combines the two observables temporarily for the filter function. */\nfunction filterOnOther(otherObs, filterFn) {\n    return pipe(withLatestFrom(otherObs), filter(([value, other]) => filterFn(other, value)), map(([value]) => value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENTS = [YouTubePlayer];\nclass YouTubePlayerModule {\n}\nYouTubePlayerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: YouTubePlayerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nYouTubePlayerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: YouTubePlayerModule, declarations: [YouTubePlayer], exports: [YouTubePlayer] });\nYouTubePlayerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: YouTubePlayerModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: YouTubePlayerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: COMPONENTS,\n                    exports: COMPONENTS,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { YouTubePlayer, YouTubePlayerModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}